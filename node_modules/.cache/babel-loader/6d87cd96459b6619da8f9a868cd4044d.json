{"remainingRequest":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/babel-loader/lib/index.js!/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/eslint-loader/index.js??ref--13-0!/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/initializer/index.js","dependencies":[{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/initializer/index.js","mtime":1552762269979},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar _mutations;\n\nimport * as c from './constants';\nimport { userService, organizationService } from './services';\nimport { schoolService } from '../schools/services';\nimport { learningTrajectoriesService } from '../learningTrajectories/services';\nimport { badgesService } from '../badges/services';\nimport { missionsService } from '../missions/services';\nexport default {\n  namespaced: true,\n  state: {\n    currentUserEmail: null,\n    currentUserOrganization: null,\n    schools: null,\n    learningTrajectories: null,\n    badges: null,\n    missions: null\n  },\n  getters: {\n    getOrganization: function getOrganization(state) {\n      return state.currentUserOrganization;\n    }\n  },\n  mutations: (_mutations = {}, _defineProperty(_mutations, c.SET_CURRENT_USER_EMAIL, function (state, payload) {\n    state.currentUserEmail = payload;\n  }), _defineProperty(_mutations, c.SET_CURRENT_USER_ORGANIZATION, function (state, payload) {\n    state.currentUserOrganization = payload;\n  }), _defineProperty(_mutations, c.SET_SCHOOLS, function (state, payload) {\n    state.schools = payload;\n  }), _defineProperty(_mutations, c.SET_LEARNING_TRAJECTORIES, function (state, payload) {\n    state.learningTrajectories = payload;\n  }), _defineProperty(_mutations, c.SET_BADGES, function (state, payload) {\n    state.badges = payload;\n  }), _defineProperty(_mutations, c.SET_MISSIONS, function (state, payload) {\n    state.missions = payload;\n  }), _mutations),\n  actions: {\n    initializeApp: function () {\n      var _initializeApp = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref) {\n        var commit, dispatch, userData, organization, schools, learningTrajectories, badges;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit, dispatch = _ref.dispatch;\n                _context.next = 3;\n                return userService.show();\n\n              case 3:\n                userData = _context.sent;\n                commit(c.SET_CURRENT_USER_EMAIL, userData.userEmail);\n                _context.next = 7;\n                return organizationService.show(userData.organizationUuid);\n\n              case 7:\n                organization = _context.sent;\n                commit(c.SET_CURRENT_USER_ORGANIZATION, organization);\n                _context.next = 11;\n                return schoolService.index(userData.organizationUuid);\n\n              case 11:\n                schools = _context.sent;\n                commit(c.SET_SCHOOLS, schools);\n                _context.next = 15;\n                return dispatch('fetchLearningTrajectories', schools.map(function (school) {\n                  return school.schoolUuid;\n                }));\n\n              case 15:\n                learningTrajectories = _context.sent;\n                setTimeout(function () {\n                  commit(c.SET_LEARNING_TRAJECTORIES, learningTrajectories);\n                  debugger;\n                }, 500);\n                _context.next = 19;\n                return dispatch('fetchBadges', learningTrajectories.map(function (lt) {\n                  return school.schoolUuid;\n                }));\n\n              case 19:\n                badges = _context.sent;\n                setTimeout(function () {\n                  commit(c.SET_BADGES, badges);\n                }, 500); // const missions = await missionsService.index(badges);\n                // commit(c.SET_MISSIONS, missions);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initializeApp(_x) {\n        return _initializeApp.apply(this, arguments);\n      }\n\n      return initializeApp;\n    }(),\n    fetchLearningTrajectories: function fetchLearningTrajectories(_ref2, schoolsUuid) {\n      var dispatch = _ref2.dispatch;\n      var lts = {};\n      schoolsUuid.forEach(function (uuid) {\n        learningTrajectoriesService.index(uuid).then(function (res) {\n          return lts[uuid] = res;\n        });\n      });\n      return lts;\n    },\n    fetchBadges: function fetchBadges(_ref3, learningTrajectoriesUuid) {\n      var dispatch = _ref3.dispatch;\n      var badges = {};\n      learningTrajectoriesUuid.forEach(function (uuid) {\n        badgesService.index(uuid).then(function (res) {\n          return badges[uuid] = res;\n        });\n      });\n      return badges;\n    }\n  }\n};",{"version":3,"sources":["/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/initializer/index.js"],"names":["c","userService","organizationService","schoolService","learningTrajectoriesService","badgesService","missionsService","namespaced","state","currentUserEmail","currentUserOrganization","schools","learningTrajectories","badges","missions","getters","getOrganization","mutations","SET_CURRENT_USER_EMAIL","payload","SET_CURRENT_USER_ORGANIZATION","SET_SCHOOLS","SET_LEARNING_TRAJECTORIES","SET_BADGES","SET_MISSIONS","actions","initializeApp","commit","dispatch","show","userData","userEmail","organizationUuid","organization","index","map","school","schoolUuid","setTimeout","lt","fetchLearningTrajectories","schoolsUuid","lts","forEach","uuid","then","res","fetchBadges","learningTrajectoriesUuid"],"mappings":"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","sourcesContent":["import * as c from './constants'\nimport { userService, organizationService, } from './services'\nimport { schoolService } from '../schools/services'\nimport { learningTrajectoriesService } from '../learningTrajectories/services'\nimport { badgesService } from '../badges/services'\nimport { missionsService } from '../missions/services'\n\nexport default {\n  namespaced: true,\n  state: {\n    currentUserEmail: null,\n    currentUserOrganization: null,\n    schools: null,\n    learningTrajectories: null,\n    badges: null,\n    missions: null\n  },\n  getters: {\n    getOrganization (state) {\n      return state.currentUserOrganization;\n    }\n  },\n  mutations: {\n    [c.SET_CURRENT_USER_EMAIL] (state, payload) {\n      state.currentUserEmail = payload\n    },\n    [c.SET_CURRENT_USER_ORGANIZATION] (state, payload) {\n      state.currentUserOrganization= payload\n    },\n    [c.SET_SCHOOLS] (state, payload) {\n      state.schools = payload\n    },\n    [c.SET_LEARNING_TRAJECTORIES] (state, payload) {\n      state.learningTrajectories = payload\n    },\n    [c.SET_BADGES] (state, payload) {\n      state.badges = payload\n    },\n    [c.SET_MISSIONS] (state, payload) {\n      state.missions = payload\n    }\n  },\n  actions: {\n    async initializeApp({commit, dispatch}) {\n\n      const userData = await userService.show();\n      commit(c.SET_CURRENT_USER_EMAIL, userData.userEmail);\n\n      const organization = await organizationService.show(userData.organizationUuid)\n      commit(c.SET_CURRENT_USER_ORGANIZATION, organization);\n\n      const schools = await schoolService.index(userData.organizationUuid);\n      commit(c.SET_SCHOOLS, schools);\n\n      const learningTrajectories = await dispatch('fetchLearningTrajectories', schools.map(school => school.schoolUuid))\n      setTimeout(()=>{\n         commit(c.SET_LEARNING_TRAJECTORIES, learningTrajectories);\n         debugger\n      }, 500);\n\n      const badges = await dispatch('fetchBadges', learningTrajectories.map(lt => school.schoolUuid))\n      setTimeout(()=>{\n         commit(c.SET_BADGES, badges)\n      }, 500);\n\n      // const missions = await missionsService.index(badges);\n      // commit(c.SET_MISSIONS, missions);\n    },\n    fetchLearningTrajectories({dispatch}, schoolsUuid) {\n      const lts = {};\n\n      schoolsUuid.forEach(uuid => {\n        learningTrajectoriesService.index(uuid)\n          .then(res => lts[uuid] = res)\n      });\n      return lts\n    },\n    fetchBadges({dispatch}, learningTrajectoriesUuid) {\n      const badges = {};\n\n      learningTrajectoriesUuid.forEach(uuid => {\n        badgesService.index(uuid)\n          .then(res => badges[uuid] = res)\n      });\n      return badges\n    }\n  }\n}\n"]}]}