{"remainingRequest":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/babel-loader/lib/index.js!/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/eslint-loader/index.js??ref--13-0!/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/store.js","dependencies":[{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/store.js","mtime":1551951367938},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n\nvar _mutations;\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport * as c from './constants';\nimport { userService, learningTrajectoriesService, schoolService, organizationService, badgesService } from './services';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    isAdmin: false,\n    currentUserEmail: null,\n    organizationUuid: null,\n    organization: null,\n    schools: null,\n    learningTrajectories: null,\n    badges: null\n  },\n  getters: {\n    getSchools: function getSchools(state) {\n      return state.schools;\n    },\n    getAdmin: function getAdmin(state) {\n      return state.isAdmin;\n    },\n    getOrganization: function getOrganization(state) {\n      return state.organization;\n    },\n    getLearningTrajectories: function getLearningTrajectories(state) {\n      return state.learningTrajectories;\n    },\n    getBadges: function getBadges(state) {\n      return state.badges;\n    }\n  },\n  mutations: (_mutations = {}, _defineProperty(_mutations, c.SET_ADMIN, function (state, payload) {\n    state.isAdmin = payload;\n  }), _defineProperty(_mutations, c.SET_LEARNING_TRAJECTORIES, function (state, payload) {\n    state.learningTrajectories = payload;\n  }), _defineProperty(_mutations, c.SET_CURRENT_USER_EMAIL, function (state, payload) {\n    state.currentUserEmail = payload.userEmail;\n  }), _defineProperty(_mutations, c.SET_CURRENT_USER_ORGANIZATION, function (state, payload) {\n    state.organizationUuid = payload.organizationUuid;\n  }), _defineProperty(_mutations, c.SET_SCHOOLS, function (state, payload) {\n    state.schools = payload;\n  }), _defineProperty(_mutations, c.SET_CURRENT_SCHOOL, function (state, payload) {\n    state.currentSchool = payload;\n  }), _defineProperty(_mutations, c.SET_ORGANIZATION, function (state, payload) {\n    state.organization = payload;\n  }), _defineProperty(_mutations, c.SET_BADGES, function (state, payload) {\n    state.badges = payload;\n  }), _mutations),\n  actions: {\n    setBecomeAdmin: function setBecomeAdmin(_ref, data) {\n      var commit = _ref.commit;\n      commit(c.SET_ADMIN, data);\n    },\n    setCurrentUserData: function () {\n      var _setCurrentUserData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref2) {\n        var commit, dispatch, userData;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref2.commit, dispatch = _ref2.dispatch;\n                _context.next = 3;\n                return userService.show();\n\n              case 3:\n                userData = _context.sent;\n                commit(c.SET_CURRENT_USER_EMAIL, userData);\n                commit(c.SET_CURRENT_USER_ORGANIZATION, userData);\n                dispatch('setSchools');\n                dispatch('setOrganization');\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setCurrentUserData(_x) {\n        return _setCurrentUserData.apply(this, arguments);\n      }\n\n      return setCurrentUserData;\n    }(),\n    setSchools: function () {\n      var _setSchools = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(_ref3) {\n        var commit, dispatch, schools;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                commit = _ref3.commit, dispatch = _ref3.dispatch;\n                _context2.next = 3;\n                return schoolService.index(this.state.organizationUuid);\n\n              case 3:\n                schools = _context2.sent;\n                commit(c.SET_SCHOOLS, schools);\n                dispatch('setLearningTrajectories');\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setSchools(_x2) {\n        return _setSchools.apply(this, arguments);\n      }\n\n      return setSchools;\n    }(),\n    setOrganization: function setOrganization(_ref4) {\n      var commit = _ref4.commit;\n      organizationService.show(this.state.organizationUuid).then(function (res) {\n        return commit(c.SET_ORGANIZATION, res);\n      });\n    },\n    setLearningTrajectories: function setLearningTrajectories(_ref5) {\n      var commit = _ref5.commit;\n      var schoolsUuid = this.state.schools.map(function (school) {\n        return school.schoolUuid;\n      });\n      var learningTrajectories = {};\n      schoolsUuid.forEach(function (uuid) {\n        learningTrajectoriesService.index(uuid).then(function (res) {\n          return learningTrajectories[uuid] = res;\n        });\n      });\n      setTimeout(function () {\n        commit(c.SET_LEARNING_TRAJECTORIES, learningTrajectories);\n      }, 1000);\n    },\n    setBadges: function setBadges(_ref6, learningTrajectoryUuid) {\n      var commit = _ref6.commit;\n      var badges = {};\n      badgesService.index(learningTrajectoryUuid).then(function (res) {\n        return badges[learningTrajectoryUuid] = res;\n      });\n      commit(c.SET_BADGES, badges);\n    }\n  }\n});",{"version":3,"sources":["/Users/thomassohet/code/Sohett/perso/seraphincademy/seraphinacademy-front/src/store/store.js"],"names":["Vue","Vuex","c","userService","learningTrajectoriesService","schoolService","organizationService","badgesService","use","Store","state","isAdmin","currentUserEmail","organizationUuid","organization","schools","learningTrajectories","badges","getters","getSchools","getAdmin","getOrganization","getLearningTrajectories","getBadges","mutations","SET_ADMIN","payload","SET_LEARNING_TRAJECTORIES","SET_CURRENT_USER_EMAIL","userEmail","SET_CURRENT_USER_ORGANIZATION","SET_SCHOOLS","SET_CURRENT_SCHOOL","currentSchool","SET_ORGANIZATION","SET_BADGES","actions","setBecomeAdmin","data","commit","setCurrentUserData","dispatch","show","userData","setSchools","index","setOrganization","then","res","setLearningTrajectories","schoolsUuid","map","school","schoolUuid","forEach","uuid","setTimeout","setBadges","learningTrajectoryUuid"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,CAAZ,MAAmB,aAAnB;AACA,SAASC,WAAT,EAAsBC,2BAAtB,EAAmDC,aAAnD,EAAkEC,mBAAlE,EAAuFC,aAAvF,QAA4G,YAA5G;AAEAP,GAAG,CAACQ,GAAJ,CAAQP,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACQ,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,OAAO,EAAE,KADJ;AAELC,IAAAA,gBAAgB,EAAE,IAFb;AAGLC,IAAAA,gBAAgB,EAAE,IAHb;AAILC,IAAAA,YAAY,EAAE,IAJT;AAKLC,IAAAA,OAAO,EAAE,IALJ;AAMLC,IAAAA,oBAAoB,EAAE,IANjB;AAOLC,IAAAA,MAAM,EAAE;AAPH,GADqB;AAU5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UADO,sBACKT,KADL,EACY;AACjB,aAAOA,KAAK,CAACK,OAAb;AACD,KAHM;AAIPK,IAAAA,QAJO,oBAIGV,KAJH,EAIU;AACf,aAAOA,KAAK,CAACC,OAAb;AACD,KANM;AAOPU,IAAAA,eAPO,2BAOUX,KAPV,EAOiB;AACtB,aAAOA,KAAK,CAACI,YAAb;AACD,KATM;AAUPQ,IAAAA,uBAVO,mCAUkBZ,KAVlB,EAUyB;AAC9B,aAAOA,KAAK,CAACM,oBAAb;AACD,KAZM;AAaPO,IAAAA,SAbO,qBAaIb,KAbJ,EAaW;AAChB,aAAOA,KAAK,CAACO,MAAb;AACD;AAfM,GAVmB;AA2B5BO,EAAAA,SAAS,gDACNtB,CAAC,CAACuB,SADI,YACQf,KADR,EACegB,OADf,EACwB;AAC7BhB,IAAAA,KAAK,CAACC,OAAN,GAAgBe,OAAhB;AACD,GAHM,+BAINxB,CAAC,CAACyB,yBAJI,YAIwBjB,KAJxB,EAI+BgB,OAJ/B,EAIwC;AAC7ChB,IAAAA,KAAK,CAACM,oBAAN,GAA6BU,OAA7B;AACD,GANM,+BAONxB,CAAC,CAAC0B,sBAPI,YAOqBlB,KAPrB,EAO4BgB,OAP5B,EAOqC;AAC1ChB,IAAAA,KAAK,CAACE,gBAAN,GAAyBc,OAAO,CAACG,SAAjC;AACD,GATM,+BAUN3B,CAAC,CAAC4B,6BAVI,YAU4BpB,KAV5B,EAUmCgB,OAVnC,EAU4C;AACjDhB,IAAAA,KAAK,CAACG,gBAAN,GAAyBa,OAAO,CAACb,gBAAjC;AACD,GAZM,+BAaNX,CAAC,CAAC6B,WAbI,YAaUrB,KAbV,EAaiBgB,OAbjB,EAa0B;AAC/BhB,IAAAA,KAAK,CAACK,OAAN,GAAgBW,OAAhB;AACD,GAfM,+BAgBNxB,CAAC,CAAC8B,kBAhBI,YAgBiBtB,KAhBjB,EAgBwBgB,OAhBxB,EAgBiC;AACtChB,IAAAA,KAAK,CAACuB,aAAN,GAAsBP,OAAtB;AACD,GAlBM,+BAmBNxB,CAAC,CAACgC,gBAnBI,YAmBexB,KAnBf,EAmBsBgB,OAnBtB,EAmB+B;AACpChB,IAAAA,KAAK,CAACI,YAAN,GAAqBY,OAArB;AACD,GArBM,+BAsBNxB,CAAC,CAACiC,UAtBI,YAsBSzB,KAtBT,EAsBgBgB,OAtBhB,EAsByB;AAC9BhB,IAAAA,KAAK,CAACO,MAAN,GAAeS,OAAf;AACD,GAxBM,cA3BmB;AAqD5BU,EAAAA,OAAO,EAAE;AACPC,IAAAA,cADO,gCACoBC,IADpB,EAC0B;AAAA,UAAhBC,MAAgB,QAAhBA,MAAgB;AAC/BA,MAAAA,MAAM,CAACrC,CAAC,CAACuB,SAAH,EAAca,IAAd,CAAN;AACD,KAHM;AAIDE,IAAAA,kBAJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIoBD,gBAAAA,MAJpB,SAIoBA,MAJpB,EAI4BE,QAJ5B,SAI4BA,QAJ5B;AAAA;AAAA,uBAKkBtC,WAAW,CAACuC,IAAZ,EALlB;;AAAA;AAKCC,gBAAAA,QALD;AAMLJ,gBAAAA,MAAM,CAACrC,CAAC,CAAC0B,sBAAH,EAA2Be,QAA3B,CAAN;AACAJ,gBAAAA,MAAM,CAACrC,CAAC,CAAC4B,6BAAH,EAAkCa,QAAlC,CAAN;AACAF,gBAAAA,QAAQ,CAAC,YAAD,CAAR;AACAA,gBAAAA,QAAQ,CAAC,iBAAD,CAAR;;AATK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAWDG,IAAAA,UAXC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWYL,gBAAAA,MAXZ,SAWYA,MAXZ,EAWoBE,QAXpB,SAWoBA,QAXpB;AAAA;AAAA,uBAYiBpC,aAAa,CAACwC,KAAd,CAAoB,KAAKnC,KAAL,CAAWG,gBAA/B,CAZjB;;AAAA;AAYCE,gBAAAA,OAZD;AAaLwB,gBAAAA,MAAM,CAACrC,CAAC,CAAC6B,WAAH,EAAgBhB,OAAhB,CAAN;AACA0B,gBAAAA,QAAQ,CAAC,yBAAD,CAAR;;AAdK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAgBPK,IAAAA,eAhBO,kCAgBoB;AAAA,UAATP,MAAS,SAATA,MAAS;AACzBjC,MAAAA,mBAAmB,CAACoC,IAApB,CAAyB,KAAKhC,KAAL,CAAWG,gBAApC,EACGkC,IADH,CACQ,UAAAC,GAAG;AAAA,eAAIT,MAAM,CAACrC,CAAC,CAACgC,gBAAH,EAAqBc,GAArB,CAAV;AAAA,OADX;AAED,KAnBM;AAoBPC,IAAAA,uBApBO,0CAoB4B;AAAA,UAATV,MAAS,SAATA,MAAS;AACjC,UAAMW,WAAW,GAAG,KAAKxC,KAAL,CAAWK,OAAX,CAAmBoC,GAAnB,CAAuB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACC,UAAX;AAAA,OAA7B,CAApB;AACA,UAAMrC,oBAAoB,GAAG,EAA7B;AAEAkC,MAAAA,WAAW,CAACI,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1BnD,QAAAA,2BAA2B,CAACyC,KAA5B,CAAkCU,IAAlC,EACGR,IADH,CACQ,UAAAC,GAAG;AAAA,iBAAIhC,oBAAoB,CAACuC,IAAD,CAApB,GAA6BP,GAAjC;AAAA,SADX;AAED,OAHD;AAKAQ,MAAAA,UAAU,CAAC,YAAI;AACZjB,QAAAA,MAAM,CAACrC,CAAC,CAACyB,yBAAH,EAA8BX,oBAA9B,CAAN;AACF,OAFS,EAER,IAFQ,CAAV;AAID,KAjCM;AAkCPyC,IAAAA,SAlCO,4BAkCcC,sBAlCd,EAkCsC;AAAA,UAAjCnB,MAAiC,SAAjCA,MAAiC;AAC3C,UAAMtB,MAAM,GAAG,EAAf;AAEAV,MAAAA,aAAa,CAACsC,KAAd,CAAoBa,sBAApB,EACGX,IADH,CACQ,UAAAC,GAAG;AAAA,eAAI/B,MAAM,CAACyC,sBAAD,CAAN,GAAiCV,GAArC;AAAA,OADX;AAGAT,MAAAA,MAAM,CAACrC,CAAC,CAACiC,UAAH,EAAelB,MAAf,CAAN;AACD;AAzCM;AArDmB,CAAf,CAAf","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport * as c from './constants'\nimport { userService, learningTrajectoriesService, schoolService, organizationService, badgesService } from './services'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({\n  state: {\n    isAdmin: false,\n    currentUserEmail: null,\n    organizationUuid: null,\n    organization: null,\n    schools: null,\n    learningTrajectories: null,\n    badges: null\n  },\n  getters: {\n    getSchools (state) {\n      return state.schools;\n    },\n    getAdmin (state) {\n      return state.isAdmin;\n    },\n    getOrganization (state) {\n      return state.organization;\n    },\n    getLearningTrajectories (state) {\n      return state.learningTrajectories;\n    },\n    getBadges (state) {\n      return state.badges\n    }\n  },\n  mutations: {\n    [c.SET_ADMIN] (state, payload) {\n      state.isAdmin = payload\n    },\n    [c.SET_LEARNING_TRAJECTORIES] (state, payload) {\n      state.learningTrajectories = payload\n    },\n    [c.SET_CURRENT_USER_EMAIL] (state, payload) {\n      state.currentUserEmail = payload.userEmail\n    },\n    [c.SET_CURRENT_USER_ORGANIZATION] (state, payload) {\n      state.organizationUuid = payload.organizationUuid\n    },\n    [c.SET_SCHOOLS] (state, payload) {\n      state.schools = payload\n    },\n    [c.SET_CURRENT_SCHOOL] (state, payload) {\n      state.currentSchool = payload\n    },\n    [c.SET_ORGANIZATION] (state, payload) {\n      state.organization = payload\n    },\n    [c.SET_BADGES] (state, payload) {\n      state.badges = payload\n    }\n  },\n  actions: {\n    setBecomeAdmin({ commit }, data) {\n      commit(c.SET_ADMIN, data)\n    },\n    async setCurrentUserData ({commit, dispatch }) {\n      const userData = await userService.show();\n      commit(c.SET_CURRENT_USER_EMAIL, userData);\n      commit(c.SET_CURRENT_USER_ORGANIZATION, userData);\n      dispatch('setSchools');\n      dispatch('setOrganization');\n    },\n    async setSchools ({commit, dispatch}) {\n      const schools = await schoolService.index(this.state.organizationUuid)\n      commit(c.SET_SCHOOLS, schools);\n      dispatch('setLearningTrajectories');\n    },\n    setOrganization ({commit}) {\n      organizationService.show(this.state.organizationUuid)\n        .then(res => commit(c.SET_ORGANIZATION, res))\n    },\n    setLearningTrajectories ({commit}) {\n      const schoolsUuid = this.state.schools.map(school => school.schoolUuid);\n      const learningTrajectories = {};\n\n      schoolsUuid.forEach(uuid => {\n        learningTrajectoriesService.index(uuid)\n          .then(res => learningTrajectories[uuid] = res)\n      });\n\n      setTimeout(()=>{\n         commit(c.SET_LEARNING_TRAJECTORIES, learningTrajectories);\n      },1000);\n\n    },\n    setBadges ({commit}, learningTrajectoryUuid) {\n      const badges = {};\n\n      badgesService.index(learningTrajectoryUuid)\n        .then(res => badges[learningTrajectoryUuid] = res)\n\n      commit(c.SET_BADGES, badges);\n    }\n  }\n})\n"]}]}